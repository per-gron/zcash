cc_library(
  name = "addrman",
  visibility = ["//visibility:public"],
  srcs = ["addrman.cpp"],
  hdrs = ["addrman.h"],
  deps = [
    ":hash",
    ":netbase",
    ":protocol",
    ":serialize",
    ":streams",
    ":sync",
    ":timedata",
    ":util",
  ],
)

cc_library(
  name = "amount",
  visibility = ["//visibility:public"],
  srcs = ["amount.cpp"],
  hdrs = ["amount.h"],
  deps = [
    ":serialize",
    ":tinyformat",
  ],
)

cc_library(
  name = "asyncrpcoperation",
  visibility = ["//visibility:public"],
  srcs = ["asyncrpcopeartion.cpp"],
  hdrs = ["asyncrpcopeartion.h"],
  deps = [
    # TODO(per-gron): Add me "@boost//:uuid",
    "//src/univalue",
  ],
)

cc_library(
  name = "asyncrpcqueue",
  visibility = ["//visibility:public"],
  srcs = ["asyncrpcqueue.cpp"],
  hdrs = ["asyncrpcqueue.h"],
  deps = [
    ":asyncrpcoperation",
  ],
)

cc_library(
  name = "bloom",
  visibility = ["//visibility:public"],
  srcs = ["bloom.cpp"],
  hdrs = ["bloom.h"],
  deps = [
    ":hash",
    ":serialize",
    ":streams",
    ":util",
    "@boost//:foreach",
    "//src/primitives:transaction",
    "//src/script",
    "//src/script:standard",
  ],
)

cc_library(
  name = "chainparamsbase",
  visibility = ["//visibility:public"],
  srcs = ["chainparamsbase.cpp"],
  hdrs = ["chainparamsbase.h"],
  deps = [
    ":util",
  ],
)

cc_library(
  name = "chainparamsseeds",
  visibility = ["//visibility:public"],
  hdrs = ["chainparamsseeds.h"],
)

cc_library(
  name = "checkqueue",
  visibility = ["//visibility:public"],
  hdrs = ["checkqueue.h"],
  deps = [
    "@boost//:foreach",
    "@boost//:thread",
  ],
)

cc_library(
  name = "clientversion",
  visibility = ["//visibility:public"],
  hdrs = ["clientversion.h"],
  srcs = ["clientversion.cpp"],
  deps = [
    ":tinyformat",
    "@boost//:preprocessor",
    "//src/config:bitcoin-config",
  ],
)

cc_library(
  name = "compat",
  visibility = ["//visibility:public"],
  hdrs = ["compat.h"],
  deps = [
    "//src/config:bitcoin-config",
  ],
)

cc_library(
  name = "compressor",
  visibility = ["//visibility:public"],
  hdrs = ["compressor.h"],
  srcs = ["compressor.cpp"],
  deps = [
    ":hash",
    ":pubkey",
    ":serialize",
    "//src/primitives:transaction",
    "//src/script",
    "//src/script:standard",
  ],
)

cc_library(
  name = "core_memusage",
  visibility = ["//visibility:public"],
  hdrs = ["core_memusage.h"],
  deps = [
    ":memusage",
    "//src/primitives:block",
    "//src/primitives:transaction",
  ],
)

# TODO(per-gron): hash and pubkey have a circular dependency. Untangle.
cc_library(
  name = "hash",
  visibility = ["//visibility:public"],
  srcs = [
    "hash.cpp",
    "pubkey.cpp"
  ],
  hdrs = [
    "hash.h",
    "pubkey.h"
  ],
  deps = [
    ":serialize",
    ":uint256",
    ":version",
    "//src/crypto:hmac_sha512",
    "//src/crypto:ripemd160",
    "//src/crypto:sha256",
    "//src/secp256k1",
  ],
)

cc_library(
  name = "httpserver",
  visibility = ["//visibility:public"],
  hdrs = ["httpserver.h"],
  srcs = ["httpserver.cpp"],
  deps = [
    ":chainparamsbase",
    ":compat",
    ":netbase",
    ":rpcprotocol",
    ":sync",
    ":ui_interface",
    ":util",
    "@boost//:algorithm",
    "@boost//:foreach",
    "@boost//:function",
    "@boost//:thread",
    "@boost//:scoped_ptr",
    "@libevent//:event",
  ],
)

cc_library(
  name = "leveldbwrapper",
  visibility = ["//visibility:public"],
  srcs = ["leveldbwrapper.cpp"],
  hdrs = ["leveldbwrapper.h"],
  deps = [
    ":clientversion",
    ":serialize",
    ":streams",
    ":util",
    ":version",
    "@boost//:filesystem",
    "//src/leveldb",
    "//src/leveldb:memenv",
  ],
)

cc_library(
  name = "limitedmap",
  visibility = ["//visibility:public"],
  hdrs = ["limitedmap.h"],
)

cc_library(
  name = "memusage",
  visibility = ["//visibility:public"],
  hdrs = ["memusage.h"],
  deps = [
    "@boost//:foreach",
    "@boost//:unordered",
  ],
)

cc_library(
  name = "merkleblock",
  visibility = ["//visibility:public"],
  hdrs = ["merkleblock.h"],
  srcs = ["merkleblock.cpp"],
  deps = [
    ":bloom",
    ":hash",
    ":serialize",
    ":uint256",
    ":utilstrencodings",
    "//src/consensus",
    "//src/primitives:block",
  ],
)

cc_library(
  name = "mruset",
  visibility = ["//visibility:public"],
  hdrs = ["mruset.h"],
)

cc_library(
  name = "net",
  visibility = ["//visibility:public"],
  srcs = ["net.cpp"],
  hdrs = ["net.h"],
  deps = [
    ":addrman",
    ":clientversion",
    ":bloom",
    ":compat",
    ":hash",
    ":limitedmap",
    ":mruset",
    ":netbase",
    ":protocol",
    ":scheduler",
    ":streams",
    ":sync",
    ":ui_interface",
    ":uint256",
    ":util",
    ":utilstrencodings",
    "@boost//:filesystem",
    "@boost//:foreach",
    "@boost//:signals2",
    "//src/crypto:common",
    "//src/primitives:transaction",
  ],
)

cc_library(
  name = "netbase",
  visibility = ["//visibility:public"],
  srcs = ["netbase.cpp"],
  hdrs = ["netbase.h"],
  deps = [
    ":compat",
    ":hash",
    ":serialize",
    ":sync",
    ":uint256",
    ":util",
    ":utilstrencodings",
    "@boost//:algorithm",
    "@boost//:thread",
    "//src/config:bitcoin-config",
  ],
)

# TODO(per-gron): These are a tangle of circular dependencies. Untangle.
# TODO(per-gron): Add these too:
#    "//src/amqp:amqpnotificationinterface",
#    "//src/zmq:zmqnotificationinterface",
cc_library(
  name = "main",
  visibility = ["//visibility:public"],
  srcs = [
    "alert.cpp",
    "arith_uint256.cpp",
    "base58.cpp",
    "chain.cpp",
    "chainparams.cpp",
    "checkpoints.cpp",
    "coins.cpp",
    "deprecation.cpp",
    "httprpc.cpp",
    "init.cpp",
    "key.cpp",
    "main.cpp",
    "metrics.cpp",
    "policy/fees.cpp",
    "pow.cpp",
    "rpcserver.cpp",
    "torcontrol.cpp",
    "txdb.cpp",
    "txmempool.cpp",
  ],
  hdrs = [
    "alert.h",
    "arith_uint256.h",
    "base58.h",
    "chain.h",
    "chainparams.h",
    "checkpoints.h",
    "coins.h",
    "deprecation.h",
    "httprpc.h",
    "init.h",
    "key.h",
    "main.h",
    "metrics.h",
    "policy/fees.h",
    "pow.h",
    "rpcserver.h",
    "torcontrol.h",
    "txdb.h",
    "txmempool.h",
  ],
  deps = [
    ":addrman",
    ":asyncrpcqueue",
    ":amount",
    ":chainparamsseeds",
    ":chainparamsbase",
    ":checkqueue",
    ":clientversion",
    ":compressor",
    ":core_memusage",
    ":hash",
    ":httpserver",
    ":leveldbwrapper",
    ":memusage",
    ":merkleblock",
    ":miner",
    ":net",
    ":protocol",
    ":pubkey",
    ":rpcprotocol",
    ":scheduler",
    ":serialize",
    ":sigcache",
    ":streams",
    ":sync",
    ":timedata",
    ":tinyformat",
    ":uint256",
    ":ui_interface",
    ":util",
    ":utilmoneystr",
    ":utilstrencodings",
    ":utiltime",
    ":validationinterface",
    ":version",
    "@boost//:algorithm",
    "@boost//:bind",
    "@boost//:filesystem",
    "@boost//:foreach",
    "@boost//:function",
    "@boost//:interprocess",
    "@boost//:iostreams",
    "@boost//:shared_ptr",
    "@boost//:signals2",
    "@boost//:thread",
    "@boost//:unordered",
    "@libevent//:event",
    "@libsodium//:sodium",
    "@openssl//:crypto",
    "//src/compat:sanity",
    "//src/consensus",
    "//src/consensus:params",
    "//src/consensus:validation",
    "//src/crypto:common",
    "//src/crypto:equihash",
    "//src/crypto:hmac_sha512",
    "//src/primitives:block",
    "//src/primitives:transaction",
    "//src/secp256k1",
    "//src/script",
    "//src/script:standard",
    "//src/snark:libsnark",
    "//src/support/allocators:secure",
    "//src/support/allocators:zeroafterfree",
    "//src/univalue",
    "//src/zcash:Address",
    "//src/zcash:JoinSplit",
  ],
)

cc_library(
  name = "protocol",
  visibility = ["//visibility:public"],
  srcs = ["protocol.cpp"],
  hdrs = ["protocol.h"],
  deps = [
    ":netbase",
    ":serialize",
    ":uint256",
    ":util",
    ":utilstrencodings",
    ":version",
  ],
)

cc_library(
  name = "pubkey",
  visibility = ["//visibility:public"],
  srcs = ["pubkey.cpp"],
  hdrs = ["pubkey.h"],
  deps = [
    ":hash",
    ":serialize",
    ":uint256",
    "//src/secp256k1",
  ],
)

cc_library(
  name = "reverselock",
  visibility = ["//visibility:public"],
  hdrs = ["reverselock.h"],
)

cc_library(
  name = "rpcprotocol",
  visibility = ["//visibility:public"],
  hdrs = ["rpcprotocol.h"],
  srcs = ["rpcprotocol.cpp"],
  deps = [
    ":tinyformat",
    ":util",
    ":utilstrencodings",
    ":utiltime",
    ":version",
    "@boost//:filesystem",
    "//src/univalue",
  ],
)

cc_library(
  name = "scheduler",
  visibility = ["//visibility:public"],
  srcs = ["scheduler.cpp"],
  hdrs = ["scheduler.h"],
  deps = [
    ":reverselock",
    "@boost//:chrono",
    "@boost//:function",
    "@boost//:thread",
  ],
)

cc_library(
  name = "serialize",
  visibility = ["//visibility:public"],
  hdrs = ["serialize.h"],
  deps = [
    "//src/compat:endian",
  ],
)

cc_library(
  name = "sigcache",
  visibility = ["//visibility:public"],
  srcs = ["sigcache.cpp"],
  hdrs = ["sigcache.h"],
  deps = [
    ":pubkey",
    ":uint256",
    ":util",
    "@boost//:thread",
    "@boost//:tuple",
    "//src/script:interpreter",
  ],
)

cc_library(
  name = "streams",
  visibility = ["//visibility:public"],
  hdrs = ["streams.h"],
  deps = [
    ":serialize",
    "//src/support/allocators:zeroafterfree",
  ],
)

cc_library(
  name = "sync",
  visibility = ["//visibility:public"],
  hdrs = ["sync.h"],
  srcs = ["sync.cpp"],
  deps = [
    ":threadsafety",
    ":util",
    ":utilstrencodings",
    "@boost//:foreach",
    "@boost//:thread",
  ],
)

cc_library(
  name = "threadsafety",
  visibility = ["//visibility:public"],
  hdrs = ["threadsafety.h"],
)

cc_library(
  name = "timedata",
  visibility = ["//visibility:public"],
  srcs = ["timedata.cpp"],
  hdrs = ["timedata.h"],
  deps = [
    ":netbase",
    ":sync",
    ":ui_interface",
    ":util",
    ":utilstrencodings",
    "@boost//:foreach",
  ],
)

cc_library(
  name = "tinyformat",
  visibility = ["//visibility:public"],
  hdrs = ["tinyformat.h"],
)

cc_library(
  name = "uint252",
  visibility = ["//visibility:public"],
  hdrs = ["uint252.h"],
  deps = [
    ":serialize",
    ":uint256",
  ],
)

cc_library(
  name = "ui_interface",
  visibility = ["//visibility:public"],
  hdrs = ["ui_interface.h"],
  deps = [
    "@boost//:signals2",
  ],
)

cc_library(
  name = "uint256",
  visibility = ["//visibility:public"],
  srcs = ["uint256.cpp"],
  hdrs = ["uint256.h"],
  deps = [
    ":utilstrencodings",
  ],
)

# TODO(per-gron): util, random, sync and chainparamsbase have circular dependencies. Untangle.
cc_library(
  name = "util",
  visibility = ["//visibility:public"],
  srcs = [
    "chainparamsbase.cpp",
    "random.cpp",
    "sync.cpp",
    "util.cpp",
  ],
  hdrs = [
    "chainparamsbase.h",
    "random.h",
    "sync.h",
    "util.h",
  ],
  deps = [
    ":compat",
    ":serialize",
    ":threadsafety",
    ":tinyformat",
    ":uint256",
    ":utiltime",
    ":utilstrencodings",
    "@boost//:algorithm",
    "@boost//:filesystem",
    "@boost//:foreach",
    "@boost//:program_options",
    "@boost//:signals2",
    "@boost//:thread",
    "@libsodium//:sodium",
    "@openssl//:crypto",
    "//src/config:bitcoin-config",
    "//src/support:cleanse",
  ],
)

cc_library(
  name = "utilmoneystr",
  visibility = ["//visibility:public"],
  srcs = ["utilmoneystr.cpp"],
  hdrs = ["utilmoneystr.h"],
  deps = [
    ":amount",
    ":tinyformat",
    ":utilstrencodings",
    "//src/primitives:transaction",
  ],
)

cc_library(
  name = "utiltime",
  visibility = ["//visibility:public"],
  srcs = ["utiltime.cpp"],
  hdrs = ["utiltime.h"],
  deps = [
    "@boost//:date_time",
    "@boost//:thread",
    "//src/config:bitcoin-config",
  ],
)

cc_library(
  name = "utilstrencodings",
  visibility = ["//visibility:public"],
  srcs = ["utilstrencodings.cpp"],
  hdrs = ["utilstrencodings.h"],
  deps = [
    ":tinyformat",
  ],
)

cc_library(
  name = "validationinterface",
  visibility = ["//visibility:public"],
  srcs = ["validationinterface.cpp"],
  hdrs = ["validationinterface.h"],
  deps = [
    "//src/zcash:IncrementalMerkleTree",
  ],
)

cc_library(
  name = "version",
  visibility = ["//visibility:public"],
  hdrs = ["version.h"],
)
