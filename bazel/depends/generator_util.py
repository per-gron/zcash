import __main__ as main
import os
import subprocess

def read_file(fn):
    with open(fn, "r") as f:
        return f.read()

def write_file(fn, contents):
    with open(fn, "w") as f:
        f.write(contents)

def build_header():
    return """###
### This file was generated by %s for the ZCash build system.
### Do not edit.
###
### When updating this dependency, re-run this script in the dependency's source
### directory and replace this file with the BUILD.bazel file that the script
### generates.
###

""" % os.path.basename(main.__file__)

def copy_file_genrule(path, src):
    name = path.replace('.', '_').replace('/', '_').replace('-', '_')

    rule = ""
    rule += "%s_contents = r\"\"\"%s\"\"\"\n" % (name, src)
    rule += "genrule(\n"
    rule += "  name = '%s',\n" % name
    rule += "  outs = ['%s'],\n" % path
    rule += "  cmd = \"cat > $@ << 'BAZEL_EOF'\\n\" + %s_contents.replace('$', '$$') + \"\\nBAZEL_EOF\",\n" % name
    rule += ")\n\n"

    return rule

def extract_variable_from_makefile(variable, makefile = "Makefile"):
    extract_variable_from_makefile.counter = extract_variable_from_makefile.counter + 1
    target = "echo_bazel_%d" % extract_variable_from_makefile.counter
    with open(makefile, "a") as f:
        f.write("%s:\n\t@echo %s\n" % (target, variable))
    return subprocess.check_output(["make", target])
extract_variable_from_makefile.counter = 0
